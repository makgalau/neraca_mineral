import { type Codec } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export declare enum WantType {
    WantBlock = "WantBlock",
    WantHave = "WantHave"
}
export declare namespace WantType {
    const codec: () => Codec<WantType>;
}
export interface WantlistEntry {
    cid: Uint8Array;
    priority: number;
    cancel?: boolean;
    wantType?: WantType;
    sendDontHave?: boolean;
}
export declare namespace WantlistEntry {
    const codec: () => Codec<WantlistEntry>;
    const encode: (obj: Partial<WantlistEntry>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => WantlistEntry;
}
export interface Wantlist {
    entries: WantlistEntry[];
    full?: boolean;
}
export declare namespace Wantlist {
    const codec: () => Codec<Wantlist>;
    const encode: (obj: Partial<Wantlist>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Wantlist;
}
export interface Block {
    prefix: Uint8Array;
    data: Uint8Array;
}
export declare namespace Block {
    const codec: () => Codec<Block>;
    const encode: (obj: Partial<Block>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Block;
}
export declare enum BlockPresenceType {
    HaveBlock = "HaveBlock",
    DontHaveBlock = "DontHaveBlock"
}
export declare namespace BlockPresenceType {
    const codec: () => Codec<BlockPresenceType>;
}
export interface BlockPresence {
    cid: Uint8Array;
    type: BlockPresenceType;
}
export declare namespace BlockPresence {
    const codec: () => Codec<BlockPresence>;
    const encode: (obj: Partial<BlockPresence>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => BlockPresence;
}
export interface BitswapMessage {
    wantlist?: Wantlist;
    blocks: Block[];
    blockPresences: BlockPresence[];
    pendingBytes: number;
}
export declare namespace BitswapMessage {
    const codec: () => Codec<BitswapMessage>;
    const encode: (obj: Partial<BitswapMessage>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => BitswapMessage;
}
//# sourceMappingURL=message.d.ts.map